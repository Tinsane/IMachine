Регистры: 8 регистров общего назначения — R0X, R1X, ..., R6X и SP (синоним R7X). Регистр IP не нужно делать непосредственно доступным из инструкций. Ширина регистра 16, должно быть можно обращаться к половинкам регистров (R0L (low), R0H (high), R1L, ...), их ширина, соответственно, 8. Регистр флагов не требуется.

Обозначения:
RX — 16-битный регистр (R0X, R1X, ...)
RS — 8-битная половинка (R0H, R0L, R1H, ...)
RiX — i-ый 16-битный регистр
RiS — i-ый 8-битный регистр
imm8 — 8-битный immediate, константа
imm4 — 4-битный immediate, константа

mov <dst> <src> — скопировать значение из src в dst. Варианты:
r mov RX, RX ,
2 mov RX, (RX) (загрузить данные из памяти по адресу, лежащему на регистре во 2 операнде, в регистр на 1 операнде)
1 mov (RX), RX (загрузить данные из регистра во 2 операнде в память по адресу, записанному в регистре в 1 операнде)
v mov RS, #imm8 (загрузить на 8-битный регистр из первого операнда значение imm8)
 push RX — положить значение регистра на стек (в т.ч. можно R7X, он же SP, тогда сначала его значение уменьшится, а затем уже уменьшенное положится по адресу, который в нём лежит в качестве значения)
pop RX — взять со стека значение и положить в регистр
call imm8 — relative call от текущей инструкции на знаковый imm8 (внутреннее представление — дополнительный код, значения [-128, 127], на стек кладётся адрес следующей инструкции для ret)
ret — вернуться к команде после последнего вызова
add RX RX — положить в первый операнд сумму обоих операндов
sub RX RX — положить в первый операнд значение первый операнд минус второй операнд; операции все над беззнаковыми интами по модулю 2^16 (как беззнаковый int в C)
mul RX RX 
div RX RX 
and RX RX 
or RX RX 
xor RX RX 
not RX 
shl RX #imm4 — положить в RX значение (RX << imm4)
shr RX #imm4 
reset — выход с кодом возврата, лежащим в R0L
nop — пустая операция
jmp <label> — безусловный переход от текущей инструкции к метке. Под капотом должен быть relative переход на знаковый imm8 (как в call) от текущей инструкции до места встречи метки, это всё должно вычисляться на этапе интерпретации; если в imm8 не влезает расстояние между jmp и меткой — ошибка ассебмлирования.
je/jne метка RX— то же, что в предыдущем, но условный; je перейдёт, если в RX 0, jne — если не 0
in RS читает 1 байт со стандартного ввода, пишет на половинчатый регистр
out RS выводит на стандартный вывод 1 байт содержимого половинчатого регистра
cmpxchg (RX) RX RX

mov1 6
mov2 6
mov3 6
mov4 12
push 3
pop 3
call 8
ret 0
add 6
sub 6
mul 6
div 6
and 6
or 6
xor 6
not 3
shl 7
shr 7
reset 0
nop 0
jmp 8
je 11
jne 11
in 4
out 4
cmpxchg 9
